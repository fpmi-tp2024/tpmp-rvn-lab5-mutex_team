//
// Created by User on 4/3/2024.
//
#include "parfume_bazaar/parfume_bazaar.h"
#include "sql/sqlite3.h"
#include <iostream>
#include <vector>

using namespace std;

namespace parfume_bazaar {
    void printHelloWorld() {
        sqlite3 *db;
        std::cout << "Hello, everything is ok!";
    }

    //здесь будут находится нащи ф-ции для работы с бд (insert, update, delete и ещё пару вынесены в классы

    //Admin& как параметр показвает, что эта ф-ция вызывается тольуо админом. Makler& - что только для маклера

    //ф-ция для создания таблиц при запуске
    void createTables();

    // по каждому названию товара – сведения о проданном количестве и общей стоимости
    //        за указанный период;
    //возвращает ответ в виде вектора строк вида "<название товара>:\n\t кол-во проданных: <число>шт., стоимость: <число>$"
    vector<string> getItemInfo(Admin& admin, Date startDate, Date endDate);

    // по каждому названию товара – перечень фирм-покупателей с указанием сведений о
    //        количестве единиц и стоимости купленного ими товара по каждой фирме-покупателю ;
    // ответ возвращается в виде массива строк вида
    // "<название товара>:\n\t<название фирмы-покупателя>: <кол-во купленных>шт., <общая стоимость купленных>$\n некст фирма \n некст фирма \n..."
    vector<string> getFirmInfoAboutItem(Admin& admin, Date startDate, Date endDate);

    // по виду товара, пользующемуся наибольшим спросом, – сведения о количестве и
    //        стоимости проданного товара по каждой фирме-покупателю (*);
    // ф-ция для Маклера! Возвращает пару <название типа> и массив строк вида
    // "<название фирмы-покупателя>: кол-во проданных: <число>шт., стоимость: <число>$
    // обращаю внимание, что тип товара не уникальный
    pair< string, vector<string> > getPopularItemInfo(Makler& makler, Date startDate, Date endDate);

    // по маклеру, совершившему максимальное количество сделок, – сведения о нем и
    //        фирмах-поставщиках;
    // Если вариантов несколько, вернуть любой
    // возвращает пару <объект типа Маклер> и массив строк с названиями фирм поставщиков, с которыми он заключал сделки
    pair< Makler, vector<string> > getSuccessfulMaklerInfo(Makler& makler, Date startDate, Date endDate);

    // по каждой фирме-поставщику – список маклеров с указанием сведений о количестве
    //        и стоимости проданного ими товара по каждому маклеру.
    // возвращает вектор пар вида { <има фирмы-поставщика>, вектор строк вида "<имя маклера>: \n\t<кол-во>шт. <стоимость>$
    vector< pair <string, vector<string> > > getFirmSellerInfo(Admin& admin);

    //3. Обеспечить с помощью операторов Insert, Update, Delete обновление информации в
    //        указанных таблицах.
    // Это всё см. cpp файлы классов

    //4. Создать функцию, которая по совершении очередной сделки обновляет по каждому
    //        маклеру сведения о количестве единиц проданного товара и сумме сделки в специальной
    //        таблице статистики(*).
    // это ф-ция void parfume_bazaar::Bargain::updateMaklersStatistics() {
    //
    //}
    // Она находится в Bargain, потому что вызывается когда мы добавляем новую сделку в таблицу

    //5. Создать функцию, которая на указанную дату выполняет обновление данных таблицы,
    //        содержащей сведения о товаре, вычитая из количества поставленных единиц количество
    //        проданных единиц до указанной даты, и удаляет соответствующие строки из таблицы
    //        заключенных сделок. В качестве параметра передать дату периода.
    void updateItemsAmount(Admin& admin);

    //6.Создать функцию, которая на указанную дату выводит всю информацию о
    //        совершенных сделках(*)
    // Возвращает массив сделок конкретного малера на конкретную дату
    vector<Bargain> getBargains(Makler& makler, Date date);
}